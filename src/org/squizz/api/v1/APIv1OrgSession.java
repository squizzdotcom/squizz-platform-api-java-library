/**
* Copyright (C) 2017 Squizz PTY LTD
* This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with this program.  If not, see http://www.gnu.org/licenses/.
*/
package org.squizz.api.v1;

import org.squizz.api.v1.endpoint.APIv1EndpointResponse;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import EcommerceStandardsDocuments.ESDocumentConstants;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import java.util.ArrayList;
import java.util.Locale;
import java.util.ResourceBundle;
import javafx.util.Pair;

/**
 * Represents a session created within the API of the SQUIZZ.com platform for an organisation
 */
public class APIv1OrgSession 
{
    /**
     * ID of the session within the platform's API
     */
    private String sessionID = "";
    
    /**
     * version of the API that responses are returned from
     */
    private String apiVersion = "";
    
    /**
     * ID of the organisation logged into the API session
     */
    private String orgID = "";
    
    /**
     * API key of the organisation logged into the API session
     */
    private String apiOrgKey = "";
    
    /**
     * API password of the organisation logged into the API session
     */
    private String apiOrgPassword = "";
    
    /**
     * amount of milliseconds by default to timeout requests to the API if no response is returned
     */
    private int defaultRequestTimeoutMilliseconds = 10000;
    
    /**
     * if true then a session has been created in the platform's API
     */
    private Boolean sessionExists = false;
    
    /**
     * resource bundle to control the language that messages in the API are displayed in
     */
    private ResourceBundle langBundle = null;
    
    /**
     * Makes a HTTP request to the platform's API to create a new session for an organisation
     * @param orgID Unique ID set for the organisation within the platform
     * @param apiOrgKey Key set for the organisation to allow it login in the API
     * @param apiOrgPassword Password set for the organisation to allow it to login to the API
     * @param defaultRequestTimeoutMilliseconds number of milliseconds to wait for a response from calls to the platform's API before giving up
     * @param languageLocale the locale that specifies the language that the API messages are displayed in
     */
    public APIv1OrgSession(String orgID, String apiOrgKey, String apiOrgPassword, int defaultRequestTimeoutMilliseconds, Locale languageLocale)
    {
        this.orgID = orgID;
        this.apiOrgKey = apiOrgKey;
        this.apiOrgPassword = apiOrgPassword;
        this.defaultRequestTimeoutMilliseconds = defaultRequestTimeoutMilliseconds;
        this.sessionExists = false;
        
        //set the language used for the session
        langBundle = ResourceBundle.getBundle(APIv1Constants.LANG_BUNDLE_NAME, languageLocale);
    }
    
    /**
     * gets the ID session generated by the platform's API
     * @return API session ID
     */
    public String getSessionID()
    {
        return sessionID;
    }
    
    /**
     * gets the version number of the API that the session was created with and using
     * @return API version number, returns empty string if no session has been created in the API yet
     */
    public String getAPIVersion()
    {
        return apiVersion;
    }
    
    /**
     * gets the language bundle that controls the language that messages of the API are displayed in
     * @return Resource bundle
     */
    public ResourceBundle getLangBundle()
    {
        return langBundle;
    }
    
    /**
     * indicates if the session with the platform's API has been created
     * @return true if the session has been created
     */
    public boolean sessionExists()
    {
        return sessionExists;
    }
    
    /**
     * clears the session's ID, marks that the session has expired and no longer exists in the platform's API
     * The method does not destroy the session within the the platform's API, to do so call destroyOrgSession()
     */
    public void markSessionExpired()
    {
        sessionExists = false;
        sessionID = "";
    }
    
    /**
     * calls the platform's API to create a new organisation session
     * @return response from trying to create the session
     */
    public APIv1EndpointResponse createOrgSession()
    {
        String endpointParams = "";
        ArrayList<Pair<String, String>> requestHeaders = new ArrayList<Pair<String, String>>();
        requestHeaders.add(new Pair<String, String>(APIv1HTTPRequest.HTTP_HEADER_CONTENT_TYPE, APIv1HTTPRequest.HTTP_HEADER_CONTENT_TYPE_FORM_URL_ENCODED));
        APIv1EndpointResponse endpointResponse = new APIv1EndpointResponse();
        
        try{
            //set endpoint parameters
            String requestPostBody = "org_id="+URLEncoder.encode(orgID, StandardCharsets.UTF_8.name())+"&api_org_key="+URLEncoder.encode(apiOrgKey, StandardCharsets.UTF_8.name())+"&api_org_pw="+URLEncoder.encode(apiOrgPassword, StandardCharsets.UTF_8.name())+"&create_session=" + ESDocumentConstants.ESD_VALUE_YES;
        
            //create JSON deserializer to interpret the response from the endpoint
            ObjectMapper jsonMapper = new ObjectMapper();
            jsonMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
            ObjectReader endpointJSONReader = jsonMapper.readerFor(APIv1EndpointResponse.class);
            
            //make a HTTP request to the platform's API endpoint to create a new session
            endpointResponse = APIv1HTTPRequest.<APIv1EndpointResponse>sendHTTPRequest(APIv1Constants.HTTP_REQUEST_METHOD_POST, APIv1Constants.API_ORG_ENDPOINT_CREATE_SESSION, endpointParams, requestHeaders, requestPostBody, defaultRequestTimeoutMilliseconds, langBundle, endpointJSONReader, endpointResponse);
            
            //update session credentials if the session was successfully created
            if(endpointResponse.result.equalsIgnoreCase(APIv1EndpointResponse.ENDPOINT_RESULT_SUCCESS))
            {
                apiVersion = endpointResponse.api_version;
                sessionExists = true;
                sessionID = endpointResponse.session_id;
                endpointResponse.session_valid = ESDocumentConstants.ESD_VALUE_YES;
            }
        }
        catch(Exception ex)
        {
            endpointResponse.result = APIv1EndpointResponse.ENDPOINT_RESULT_FAILURE;
            endpointResponse.result_code = APIv1EndpointResponse.ENDPOINT_RESULT_CODE_ERROR_UNKNOWN;
			endpointResponse.result_message = langBundle.getString(endpointResponse.result_code) + "\n" + ex.getLocalizedMessage();
        }
        
        return endpointResponse;
    }
    
    /**
     * calls the platform's API to destroy an existing organisation session
     * @return response from trying to destroy the API session
     */
    public APIv1EndpointResponse destroyOrgSession()
    {
        String endpointParams = "";
        String requestPostBody = "";
        ArrayList<Pair<String, String>> requestHeaders = new ArrayList<Pair<String, String>>();
        APIv1EndpointResponse endpointResponse = new APIv1EndpointResponse();
        
        try{
            //create JSON deserializer to interpret the response from the endpoint
            ObjectMapper jsonMapper = new ObjectMapper();
            jsonMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
            ObjectReader endpointJSONReader = jsonMapper.readerFor(APIv1EndpointResponse.class);
            
            //make a HTTP request to the platform's API endpoint to create a new session
            endpointResponse = APIv1HTTPRequest.<APIv1EndpointResponse>sendHTTPRequest(APIv1Constants.HTTP_REQUEST_METHOD_GET, APIv1Constants.API_ORG_ENDPOINT_DESTROY_SESSION+APIv1Constants.API_PATH_SLASH+sessionID, endpointParams, requestHeaders, requestPostBody, defaultRequestTimeoutMilliseconds, langBundle, endpointJSONReader, endpointResponse);
            
            //update session credentials if the session was successfully destroyed
            if(endpointResponse.result.equalsIgnoreCase(APIv1EndpointResponse.ENDPOINT_RESULT_SUCCESS))
            {
                sessionExists = false;
                sessionID = "";
                endpointResponse.session_valid = ESDocumentConstants.ESD_VALUE_NO;
            }
        }
        catch(Exception ex)
        {
            endpointResponse.result = APIv1EndpointResponse.ENDPOINT_RESULT_FAILURE;
            endpointResponse.result_code = APIv1EndpointResponse.ENDPOINT_RESULT_CODE_ERROR_UNKNOWN;
			endpointResponse.result_message = langBundle.getString(endpointResponse.result_code) + "\n" + ex.getLocalizedMessage();
        }
        
        return endpointResponse;
    }
    
    /**
     * calls the platform's API to validate an existing organisation session exists and is valid
     * @return response from trying to validate the API session
     */
    public APIv1EndpointResponse validateOrgSession()
    {   
        //call the server to validate that the session still exists
        String endpointParams = "";
        String requestPostBody = "";
        ArrayList<Pair<String, String>> requestHeaders = new ArrayList<Pair<String, String>>();
        APIv1EndpointResponse endpointResponse = new APIv1EndpointResponse();
        
        try{
            //create JSON deserializer to interpret the response from the endpoint
            ObjectMapper jsonMapper = new ObjectMapper();
            jsonMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
            ObjectReader endpointJSONReader = jsonMapper.readerFor(APIv1EndpointResponse.class);
            
            //make a HTTP request to the platform's API endpoint to create a new session
            endpointResponse = APIv1HTTPRequest.<APIv1EndpointResponse>sendHTTPRequest(APIv1Constants.HTTP_REQUEST_METHOD_GET, APIv1Constants.API_ORG_ENDPOINT_VALIDATE_SESSION+APIv1Constants.API_PATH_SLASH+sessionID, endpointParams, requestHeaders, requestPostBody, defaultRequestTimeoutMilliseconds, langBundle, endpointJSONReader, endpointResponse);
            
            //update session credentials if the session was successfully destroyed
            if(endpointResponse.result.equalsIgnoreCase(APIv1EndpointResponse.ENDPOINT_RESULT_SUCCESS))
            {
                apiVersion = endpointResponse.api_version;
                sessionExists = true;
                endpointResponse.session_valid = ESDocumentConstants.ESD_VALUE_YES;
            }else{
                //clear the session variables
                if(endpointResponse.result.equalsIgnoreCase(APIv1EndpointResponse.ENDPOINT_RESULT_CODE_ERROR_SESSION_INVALID)){
                    sessionExists = false;
                    sessionID = "";
                    endpointResponse.session_valid = ESDocumentConstants.ESD_VALUE_NO;
                }
            }
        }
        catch(Exception ex)
        {
            endpointResponse.result = APIv1EndpointResponse.ENDPOINT_RESULT_FAILURE;
            endpointResponse.result_code = APIv1EndpointResponse.ENDPOINT_RESULT_CODE_ERROR_UNKNOWN;
			endpointResponse.result_message = langBundle.getString(endpointResponse.result_code) + "\n" + ex.getLocalizedMessage();
        }
        
        return endpointResponse;
    }
    
    /**
     * * calls the platform's API to validate an existing organisation session exists and is valid, if not then attempts to login to the API and create a new session
     * @return response from trying to validate the API session or create the API session
     */
    public APIv1EndpointResponse validateCreateOrgSession()
    {
        boolean createSession = false;
        APIv1EndpointResponse endpointResponse = new APIv1EndpointResponse();
        
        //check if the organisation session is valid
        if(!sessionID.isEmpty()){
            endpointResponse = validateOrgSession();
            
            //check if the session was validated
            if(endpointResponse.result.equalsIgnoreCase(APIv1EndpointResponse.ENDPOINT_RESULT_CODE_ERROR_SESSION_INVALID)){
                createSession = true;
            }
        }else{
            createSession = true;
        }
        
        //attempt to create a new API organisation session
        if(createSession){
            endpointResponse = createOrgSession();
        }
        
        return endpointResponse;
    }
}
